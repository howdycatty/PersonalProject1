{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = printValue;\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _isSymbol = require('lodash/isSymbol');\n\nvar _isSymbol2 = _interopRequireDefault(_isSymbol);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar toString = Object.prototype.toString;\nvar toISOString = Date.prototype.toISOString;\nvar errorToString = Error.prototype.toString;\nvar regExpToString = RegExp.prototype.toString;\nvar symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : function () {\n  return '';\n};\nvar SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\n\nfunction printNumber(val) {\n  if (val != +val) return 'NaN';\n  var isNegativeZero = val === 0 && 1 / val < 0;\n  return isNegativeZero ? '-0' : '' + val;\n}\n\nfunction printFunction(val) {\n  return '[Function ' + (val.name || 'anonymous') + ']';\n}\n\nfunction printSymbol(val) {\n  return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');\n}\n\nfunction printError(val) {\n  return '[' + errorToString.call(val) + ']';\n}\n\nfunction printSimpleValue(val) {\n  var quoteStrings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (val === true || val === false) return '' + val;\n  if (val === undefined) return 'undefined';\n  if (val === null) return 'null';\n  var typeOf = typeof val === 'undefined' ? 'undefined' : _typeof(val);\n  if (typeOf === 'number') return printNumber(val);\n  if (typeOf === 'string') return quoteStrings ? '\"' + val + '\"' : val;\n  if ((0, _isFunction2.default)(val)) return printFunction(val);\n  if ((0, _isSymbol2.default)(val)) return printSymbol(val);\n  var tag = toString.call(val);\n  if (tag === '[object Date]') return isNaN(val.getTime()) ? String(val) : toISOString.call(val);\n  if (tag === '[object Error]' || val instanceof Error) return printError(val);\n  if (tag === '[object RegExp]') return regExpToString.call(val);\n  return null;\n}\n\nfunction printValue(value, quoteStrings) {\n  var result = printSimpleValue(value, quoteStrings);\n  if (result !== null) return result;\n  return JSON.stringify(value, function (key, value) {\n    var result = printSimpleValue(this[key], quoteStrings);\n    if (result !== null) return result;\n    return value;\n  }, 2);\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}