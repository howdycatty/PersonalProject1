{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _has = require('lodash/has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _isSchema = require('./util/isSchema');\n\nvar _isSchema2 = _interopRequireDefault(_isSchema);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction callOrConcat(schema) {\n  if (typeof schema === 'function') return schema;\n  return function (base) {\n    return base.concat(schema);\n  };\n}\n\nvar Conditional = function () {\n  function Conditional(refs, options) {\n    _classCallCheck(this, Conditional);\n\n    var is = options.is,\n        then = options.then,\n        otherwise = options.otherwise;\n    this.refs = [].concat(refs);\n    then = callOrConcat(then);\n    otherwise = callOrConcat(otherwise);\n    if (typeof options === 'function') this.fn = options;else {\n      if (!(0, _has2.default)(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');\n      if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');\n      var isFn = typeof is === 'function' ? is : function () {\n        for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n          values[_key] = arguments[_key];\n        }\n\n        return values.every(function (value) {\n          return value === is;\n        });\n      };\n\n      this.fn = function () {\n        for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          values[_key2] = arguments[_key2];\n        }\n\n        var currentSchema = values.pop();\n        var option = isFn.apply(undefined, values) ? then : otherwise;\n        return option(currentSchema);\n      };\n    }\n  }\n\n  Conditional.prototype.getValue = function getValue(parent, context) {\n    var values = this.refs.map(function (r) {\n      return r.getValue(parent, context);\n    });\n    return values;\n  };\n\n  Conditional.prototype.resolve = function resolve(ctx, values) {\n    var schema = this.fn.apply(ctx, values.concat(ctx));\n    if (schema !== undefined && !(0, _isSchema2.default)(schema)) throw new TypeError('conditions must return a schema object');\n    return schema || ctx;\n  };\n\n  return Conditional;\n}();\n\nexports.default = Conditional;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}