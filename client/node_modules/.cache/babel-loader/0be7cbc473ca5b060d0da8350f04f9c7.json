{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction getRange(start, end) {\n  return _toConsumableArray(Array(end - start + 1)).map(function (_, i) {\n    return start + i;\n  });\n}\n\nfunction getPageInfo(_ref) {\n  var limit = _ref.limit,\n      pageCount = _ref.pageCount,\n      total = _ref.total,\n      page = _ref.page;\n  var totalPages = Math.ceil(total / limit);\n  var totalResults = parseInt(total, 10);\n  var currentPage = parseInt(page, 10);\n\n  if (currentPage < 1) {\n    currentPage = 1;\n  }\n\n  if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  var firstPage = Math.max(1, currentPage - Math.floor(pageCount / 2));\n  var lastPage = Math.min(totalPages, currentPage + Math.floor(pageCount / 2));\n\n  if (lastPage - firstPage + 1 < pageCount) {\n    if (currentPage < totalPages / 2) {\n      lastPage = Math.min(totalPages, lastPage + (pageCount - (lastPage - firstPage)));\n    } else {\n      firstPage = Math.max(1, firstPage - (pageCount - (lastPage - firstPage)));\n    }\n  }\n\n  if (lastPage - firstPage + 1 > pageCount) {\n    if (currentPage > totalPages / 2) {\n      // eslint-disable-next-line\n      firstPage++;\n    } else {\n      // eslint-disable-next-line\n      lastPage--;\n    }\n  }\n\n  var firstResult = limit * (currentPage - 1);\n  var lastResult = limit * currentPage - 1;\n  return {\n    totalPages: totalPages,\n    pages: Math.min(lastPage - firstPage + 1, totalPages),\n    currentPage: currentPage,\n    firstPage: firstPage,\n    lastPage: lastPage,\n    previousPage: currentPage - 1,\n    nextPage: currentPage + 1,\n    hasPreviousPage: currentPage > 1,\n    hasNextPage: currentPage < totalPages,\n    totalResults: totalResults,\n    results: Math.min(lastResult - firstResult + 1, totalResults),\n    firstResult: firstResult,\n    lastResult: lastResult\n  };\n}\n\nvar Pagination =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pagination, _Component);\n\n  function Pagination() {\n    var _this;\n\n    _classCallCheck(this, Pagination);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pagination).call(this));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getPageItemProps\", function (props) {\n      var pageValue = props.pageValue,\n          handlePageChange = props.onPageChange,\n          rest = _objectWithoutProperties(props, [\"pageValue\", \"onPageChange\"]);\n\n      var onPageChange = function onPageChange(e) {\n        if (typeof handlePageChange === 'function') {\n          handlePageChange(pageValue, e);\n        }\n\n        _this.setState({\n          currentPage: pageValue\n        });\n      };\n\n      return _objectSpread({\n        onClick: onPageChange\n      }, rest);\n    });\n\n    _this.state = {\n      currentPage: 0\n    };\n    return _this;\n  }\n\n  _createClass(Pagination, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (this.props.currentPage) {\n        this.setState({\n          currentPage: parseInt(this.props.currentPage, 10)\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.currentPage !== this.props.currentPage) {\n        this.setState({\n          currentPage: parseInt(nextProps.currentPage, 10)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          total = _this$props.total,\n          limit = _this$props.limit,\n          pageCount = _this$props.pageCount;\n      var currentPage = this.state.currentPage;\n      var pageInfo = getPageInfo({\n        limit: limit,\n        pageCount: pageCount,\n        total: total,\n        page: currentPage\n      });\n      var firstPage = pageInfo.firstPage,\n          lastPage = pageInfo.lastPage,\n          hasNextPage = pageInfo.hasNextPage,\n          hasPreviousPage = pageInfo.hasPreviousPage,\n          previousPage = pageInfo.previousPage,\n          nextPage = pageInfo.nextPage,\n          totalPages = pageInfo.totalPages;\n      var pages = total ? getRange(firstPage, lastPage) : [];\n      return React.createElement(\"div\", null, this.props.children({\n        pages: pages,\n        previousPage: previousPage,\n        nextPage: nextPage,\n        totalPages: totalPages,\n        currentPage: currentPage,\n        hasNextPage: hasNextPage,\n        hasPreviousPage: hasPreviousPage,\n        getPageItemProps: this._getPageItemProps\n      }));\n    }\n  }]);\n\n  return Pagination;\n}(Component);\n\nPagination.propTypes = {\n  total: PropTypes.number.isRequired,\n  limit: PropTypes.number,\n  pageCount: PropTypes.number,\n  currentPage: PropTypes.number,\n  pageValue: PropTypes.number,\n  children: PropTypes.func.isRequired,\n  onPageChange: PropTypes.func\n};\nPagination.defaultProps = {\n  limit: 10,\n  pageCount: 5,\n  currentPage: 0,\n  pageValue: 0\n};\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}