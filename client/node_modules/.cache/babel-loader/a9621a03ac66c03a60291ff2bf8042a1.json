{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _mixed = require('./mixed');\n\nvar _mixed2 = _interopRequireDefault(_mixed);\n\nvar _inherits = require('./util/inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nvar _isodate = require('./util/isodate');\n\nvar _isodate2 = _interopRequireDefault(_isodate);\n\nvar _locale = require('./locale.js');\n\nvar _isAbsent = require('./util/isAbsent');\n\nvar _isAbsent2 = _interopRequireDefault(_isAbsent);\n\nvar _Reference = require('./Reference');\n\nvar _Reference2 = _interopRequireDefault(_Reference);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar invalidDate = new Date('');\n\nvar isDate = function isDate(obj) {\n  return Object.prototype.toString.call(obj) === '[object Date]';\n};\n\nexports.default = DateSchema;\n\nfunction DateSchema() {\n  var _this = this;\n\n  if (!(this instanceof DateSchema)) return new DateSchema();\n\n  _mixed2.default.call(this, {\n    type: 'date'\n  });\n\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      if (this.isType(value)) return isDate(value) ? new Date(value) : value;\n      value = (0, _isodate2.default)(value);\n      return value ? new Date(value) : invalidDate;\n    });\n  });\n}\n\n(0, _inherits2.default)(DateSchema, _mixed2.default, {\n  _typeCheck: function _typeCheck(v) {\n    return isDate(v) && !isNaN(v.getTime());\n  },\n  min: function min(_min, msg) {\n    var limit = _min;\n\n    if (!_Reference2.default.isRef(limit)) {\n      limit = this.cast(_min);\n      if (!this._typeCheck(limit)) throw new TypeError('`min` must be a Date or a value that can be `cast()` to a Date');\n    }\n\n    return this.test({\n      name: 'min',\n      exclusive: true,\n      message: msg || _locale.date.min,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return (0, _isAbsent2.default)(value) || value >= this.resolve(limit);\n      }\n    });\n  },\n  max: function max(_max, msg) {\n    var limit = _max;\n\n    if (!_Reference2.default.isRef(limit)) {\n      limit = this.cast(_max);\n      if (!this._typeCheck(limit)) throw new TypeError('`max` must be a Date or a value that can be `cast()` to a Date');\n    }\n\n    return this.test({\n      name: 'max',\n      exclusive: true,\n      message: msg || _locale.date.max,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return (0, _isAbsent2.default)(value) || value <= this.resolve(limit);\n      }\n    });\n  }\n});\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}