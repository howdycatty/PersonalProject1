{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = NumberSchema;\n\nvar _inherits = require('./util/inherits');\n\nvar _inherits2 = _interopRequireDefault(_inherits);\n\nvar _mixed = require('./mixed');\n\nvar _mixed2 = _interopRequireDefault(_mixed);\n\nvar _locale = require('./locale.js');\n\nvar _isAbsent = require('./util/isAbsent');\n\nvar _isAbsent2 = _interopRequireDefault(_isAbsent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nvar isInteger = function isInteger(val) {\n  return (0, _isAbsent2.default)(val) || val === (val | 0);\n};\n\nfunction NumberSchema() {\n  var _this = this;\n\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n\n  _mixed2.default.call(this, {\n    type: 'number'\n  });\n\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      if (this.isType(value)) return value;\n      var parsed = parseFloat(value);\n      if (this.isType(parsed)) return parsed;\n      return NaN;\n    });\n  });\n}\n\n(0, _inherits2.default)(NumberSchema, _mixed2.default, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, msg) {\n    return this.test({\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      message: msg || _locale.number.min,\n      test: function test(value) {\n        return (0, _isAbsent2.default)(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, msg) {\n    return this.test({\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      message: msg || _locale.number.max,\n      test: function test(value) {\n        return (0, _isAbsent2.default)(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, msg) {\n    return this.test({\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      message: msg || _locale.number.less,\n      test: function test(value) {\n        return (0, _isAbsent2.default)(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, msg) {\n    return this.test({\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      message: msg || _locale.number.more,\n      test: function test(value) {\n        return (0, _isAbsent2.default)(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    return this.min(0, msg || _locale.number.positive);\n  },\n  negative: function negative(msg) {\n    return this.max(0, msg || _locale.number.negative);\n  },\n  integer: function integer(msg) {\n    msg = msg || _locale.number.integer;\n    return this.test('integer', msg, isInteger);\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !(0, _isAbsent2.default)(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !(0, _isAbsent2.default)(value) ? Math[method](value) : value;\n    });\n  }\n});\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}