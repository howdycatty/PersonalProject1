{"ast":null,"code":"/**\r\n * Topological sorting function\r\n *\r\n * @param {Array} edges\r\n * @returns {Array}\r\n */\nmodule.exports = exports = function exports(edges) {\n  return toposort(uniqueNodes(edges), edges);\n};\n\nexports.array = toposort;\n\nfunction toposort(nodes, edges) {\n  var cursor = nodes.length,\n      sorted = new Array(cursor),\n      visited = {},\n      i = cursor;\n\n  while (i--) {\n    if (!visited[i]) visit(nodes[i], i, []);\n  }\n\n  return sorted;\n\n  function visit(node, i, predecessors) {\n    if (predecessors.indexOf(node) >= 0) {\n      throw new Error('Cyclic dependency: ' + JSON.stringify(node));\n    }\n\n    if (visited[i]) return;\n    visited[i] = true; // outgoing edges\n\n    var outgoing = edges.filter(function (edge) {\n      return edge[0] === node;\n    });\n\n    if (i = outgoing.length) {\n      var preds = predecessors.concat(node);\n\n      do {\n        var child = outgoing[--i][1];\n        visit(child, nodes.indexOf(child), preds);\n      } while (i);\n    }\n\n    sorted[--cursor] = node;\n  }\n}\n\nfunction uniqueNodes(arr) {\n  var res = [];\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var edge = arr[i];\n    if (res.indexOf(edge[0]) < 0) res.push(edge[0]);\n    if (res.indexOf(edge[1]) < 0) res.push(edge[1]);\n  }\n\n  return res;\n}","map":null,"metadata":{},"sourceType":"script"}