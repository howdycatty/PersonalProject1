{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _isSchema = require('./util/isSchema');\n\nvar _isSchema2 = _interopRequireDefault(_isSchema);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Lazy = function () {\n  function Lazy(mapFn) {\n    _classCallCheck(this, Lazy);\n\n    this._resolve = function () {\n      var schema = mapFn.apply(undefined, arguments);\n      if (!(0, _isSchema2.default)(schema)) throw new TypeError('lazy() functions must return a valid schema');\n      return schema;\n    };\n  }\n\n  Lazy.prototype.resolve = function resolve(_ref) {\n    var value = _ref.value,\n        rest = _objectWithoutProperties(_ref, ['value']);\n\n    return this._resolve(value, rest);\n  };\n\n  Lazy.prototype.cast = function cast(value, options) {\n    return this._resolve(value, options).cast(value, options);\n  };\n\n  Lazy.prototype.validate = function validate(value, options) {\n    return this._resolve(value, options).validate(value, options);\n  };\n\n  return Lazy;\n}();\n\nLazy.prototype.__isYupSchema__ = true;\nexports.default = Lazy;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}