{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _propertyExpr = require('property-expr');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar validateName = function validateName(d) {\n  if (typeof d !== 'string') throw new TypeError(\"ref's must be strings, got: \" + d);\n};\n\nvar Reference = function () {\n  Reference.isRef = function isRef(value) {\n    return !!(value && (value.__isYupRef || value instanceof Reference));\n  };\n\n  Reference.prototype.toString = function toString() {\n    return 'Ref(' + this.key + ')';\n  };\n\n  function Reference(key, mapFn) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Reference);\n\n    validateName(key);\n    var prefix = options.contextPrefix || '$';\n\n    if (typeof key === 'function') {\n      key = '.';\n    }\n\n    this.key = key.trim();\n    this.prefix = prefix;\n    this.isContext = this.key.indexOf(prefix) === 0;\n    this.isSelf = this.key === '.';\n    this.path = this.isContext ? this.key.slice(this.prefix.length) : this.key;\n    this._get = (0, _propertyExpr.getter)(this.path, true);\n\n    this.map = mapFn || function (value) {\n      return value;\n    };\n  }\n\n  Reference.prototype.resolve = function resolve() {\n    return this;\n  };\n\n  Reference.prototype.cast = function cast(value, _ref) {\n    var parent = _ref.parent,\n        context = _ref.context;\n    return this.getValue(parent, context);\n  };\n\n  Reference.prototype.getValue = function getValue(parent, context) {\n    var isContext = this.isContext;\n\n    var value = this._get(isContext ? context : parent || context || {});\n\n    return this.map(value);\n  };\n\n  return Reference;\n}();\n\nexports.default = Reference;\nReference.prototype.__isYupRef = true;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}